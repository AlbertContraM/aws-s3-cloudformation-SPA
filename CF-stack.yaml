AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Creates the infrastructure to host and expose a Single Page Application:
      - An Amazon S3 bucket for hosting the application
      - An S3 bucket policy to allow CloudFront acces to the files bucket
      - An Amazon CloudFront distribution to expose the application
      - An Amazon S3 bucket for hosting bucket and cloudfront access logs
      - An SSL/TLS certificate hosted in ACM for the custom domain name
      - DNS records for the custom domain name
      - CloudFront function to redirect to index.html because react router need this behaviour

Parameters:
  SubDomain:
    Description: The part of a website address before your DomainName - e.g. www or
      img
    Type: String
    Default: www
    AllowedPattern: ^[^.]*$
  DomainName:
    Description: The part of a website address after your SubDomain - e.g. example.com
    Type: String
  HostedZoneId:
    Description: HostedZoneId for the domain e.g. Z23ABC4XYZL05B
    Type: String
  CreateApex:
    Description: Create an Apex Alias in CloudFront distribution - yes/no, apex for www.example.com is example.com
    Type: String
    Default: 'no'
    AllowedValues:
    - 'yes'
    - 'no'

Conditions:
  CreateApexConfig:
    Fn::Equals:
    - Ref: CreateApex
    - 'yes'

Resources:

  # The Amazon S3 bucket into which our Single Page Application build files must be deployed
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'protunnus-web'
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-access-logs
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'

  # The Amazon S3 bucket policy for securing the bucket hosting the application
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject*'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*

  # The Amazon S3 bucket into which access logs from S3 (for the application) and CloudFront will be put
  LoggingBucket:
    #checkov:skip=CKV_AWS_18: "This bucket is private and only for storing logs"
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'protunnus-web-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
    DeletionPolicy: Delete

  # The Amazon CloudFront distribution exposing our Single Page Application
  CFDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - CFOriginAccessIdentity
      - Certificate
      - CloudFrontRedirectFunction
    Properties:
      DistributionConfig:
        Aliases:
          - Fn::Sub: ${SubDomain}.${DomainName}
          - Fn::If:
            - CreateApexConfig
            - Ref: DomainName
            - Ref: AWS::NoValue
        Origins:
        - DomainName: !GetAtt S3Bucket.RegionalDomainName
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CFOriginAccessIdentity}"
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: myS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref CloudFrontRedirectFunction
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-access-logs'
        Comment: "Protunnus web distribution"

  # The Amazon CloudFront origin access identity
  CFOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    DependsOn:
      - S3Bucket
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'access-identity-protunnus-web'

  # The SSL/TLS certificate for HTTPS comunications
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName:
        Fn::Sub: ${SubDomain}.${DomainName}
      SubjectAlternativeNames:
        Fn::If:
        - CreateApexConfig
        - - Ref: DomainName
        - Ref: AWS::NoValue
      DomainValidationOptions:
      - DomainName:
          Fn::Sub: ${SubDomain}.${DomainName}
        HostedZoneId: !Ref HostedZoneId
      - Fn::If:
        - CreateApexConfig
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - Ref: AWS::NoValue
      ValidationMethod: DNS

  # DNS record for SubDomain.DomainName
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Name: !Sub "${SubDomain}.${DomainName}"
        Type: A
        AliasTarget:
          DNSName: !GetAtt CFDistribution.DomainName
          EvaluateTargetHealth: false
          # For ClodFront edge-optimized distributios are by default Z2FDTNDATAQYW2
          HostedZoneId: Z2FDTNDATAQYW2

  # DNS record for DomainName - Apex alias
  ApexRoute53RecordSetGroup:
    Condition: CreateApexConfig
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          DNSName: !GetAtt CFDistribution.DomainName
          EvaluateTargetHealth: false
          # For ClodFront edge-optimized distributios are by default Z2FDTNDATAQYW2
          HostedZoneId: Z2FDTNDATAQYW2

  # Cloudfront Function to reroute the requests to index
  CloudFrontRedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: protunnus-web-redirect-to-index
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
    
          var request = event.request;
          var uri = request.uri;
          
          // console.log("in uri: " + request.uri)
          
          // Check if the uri has a file extension
          if(uri.split('/').reverse()[0].split('.').length >= 2){
              // Return request as is
              return request;
          }
          
          // If doesnt has a file extension, always return index document
          request.uri = '/'; // handle all react routes
          
          // console.log("out uri: " + request.uri)
          
          return request;

        }
      FunctionConfig:
        Comment: !Sub 'Redirect to index.html all request that are not for a specific file'
        Runtime: cloudfront-js-1.0
          

Outputs:
  CFDistributionDomainName:
    Value: !GetAtt CFDistribution.DomainName
  BucketName:
    Value: !Ref S3Bucket
